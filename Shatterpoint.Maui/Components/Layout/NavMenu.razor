@using Shatterpoint.Maui.Services
@using Shatterpoint.Maui.Components.Reusable;

@inject NavigationService NavigationService;
@inject NavigationManager NavigationManager;

<div class="component">
    @if (!DisplayBack)
    {

        <div class="flex main-color">
            <a class="img-container flex-auto flex @IsSelected(1)" @onclick='() => Navigate("/build")'>
                <img class="units-icon" src="/img/icons/list.png" alt="Menu build" />
            </a>
            <a class="img-container flex-auto flex @IsSelected(2)" @onclick='() => Navigate("/list")'>
                <img class="units-icon" src="/img/icons/list-icon.png" alt="Menu list" />
            </a>
            <a class="img-container flex-auto flex @IsSelected(3)" @onclick='() => Navigate("/play")'>
                <img class="units-icon" src="/img/icons/lightsabers.png" alt="Menu cards" />
            </a>
            @if (IfDebug())
            {
                <a class="img-container flex-auto flex @IsSelected(4)" @onclick='() => Navigate("/sandbox")'>
                    <div class="units-icon">sandbox</div>
                </a>
            }
        </div>
    }
    else
    {
        <div class="back-band" @onclick="BackOnClick">
            <img src="/img/icons/back-arrow.png" alt="back arrow" />
            <p>Back</p>
        </div>

    }
</div>
<div class="@GetClass(1)">List Building</div>
<div class="@GetClass(2)">Lists</div>
<div class="@GetClass(3)">Custom Cards</div>
<div class="@GetClass(4)">Sandbox</div>

@code {
    public int SelectedTab { get; set; } = 2;
    public bool DisplayBack { get; set; } = false;

    public bool IfDebug()
    {
#if DEBUG
    return true;
#else
        return false;
#endif
    }

    public Task BackOnClick()
    {
        NavigationService.Back();
        return Task.CompletedTask;
    }

    public void Navigate(string destination)
    {
        NavigationService.NavigateFromTo(null, destination);
    }

    protected override Task OnInitializedAsync()
    {
        NavigationService.NavigationChanged += OnNavigationChanged;
        return base.OnInitializedAsync();
    }

    private void OnNavigationChanged(object sender, NavigationChangedEventArgs args)
    {
        if (args.SelectedTab != -1)
            SelectedTab = args.SelectedTab;

        DisplayBack = args.Modal;

        StateHasChanged();
    }

    public void Dispose() => NavigationService.NavigationChanged -= OnNavigationChanged;

    public string IsSelected(int selection)
    {
        if (selection == SelectedTab)
            return "tab-selected";
        else
            return "tab-not-selected";
    }

    public string GetClass(int selection)
    {
        if (selection == SelectedTab)
            return "page-title-selected";
        else
            return "page-title";
    }
}