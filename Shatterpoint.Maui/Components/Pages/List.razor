@using Shatterpoint.Lib.Extensions
@using Shatterpoint.Lib.Model
@using Shatterpoint.Lib.Services;
@using Shatterpoint.Lib.Units;
@using Shatterpoint.Maui.Components.Reusable;
@using System.Text;
@using Shatterpoint.Maui.Services

@page "/"
@page "/list"
@inject UnitDataBaseService UnitDataBaseService
@inject SelectedUnitsService SelectedUnitsService
@inject NavigationService NavigationService;
@inject DataAccessLayer DataAccessLayer;

<div class="page-content scrollable">
    <ul>
        @foreach (var entity in Lists)
        {
            <li class="grid @SlideRight(entity.Index)" @onclick="() => OpenCloseDetail(entity.Index)">
                <UnitArray ArrayUnit="entity.ArrayUnit" @key="entity" />
                <input class="play-button" type="image" src="img/icons/lightsabers.png" @onclick="() => CustomCards()" value="Custom Cards" />
            </li>
        }
    </ul>

    <div class="footer">
        <input class="button-style" type="button" value="Add new list" @onclick="AddNewList" />
    </div>
</div>


@code {

    public List<ListEntity> Lists { get; set; } = new();

    public int SelectedListIndex { get; set; } = -1;

    protected override async Task OnInitializedAsync()
    {
        // Load all data
        Lists = await DataAccessLayer.LoadLists();

        await base.OnInitializedAsync();
    }

    private string GetTotalForce()
    {
        int result = 0;

        foreach (var unit in SelectedUnitsService.UnitSelectionArray.Where(x => x is not null))
        {
            result += unit.Force;
        }
        return result.ToString();
    }

    public void EditList()
    {
        SelectedUnitsService.FileIndex = SelectedListIndex;
        SelectedUnitsService.UnitSelectionArray = Lists.FirstOrDefault(x => x.Index == SelectedListIndex).ArrayUnit;
        NavigationService.NavigateFromTo("/list", "/build");
    }

    public void CustomCards()
    {
        SelectedUnitsService.FileIndex = SelectedListIndex;
        SelectedUnitsService.UnitSelectionArray = Lists.FirstOrDefault(x => x.Index == SelectedListIndex).ArrayUnit;
        NavigationService.NavigateFromTo("/list", "/play");
    }

    public void AddNewList()
    {
        var indexMax = Lists.LastOrDefault()?.Index ?? 0;
        var listEntity = new ListEntity()
            {
                ArrayUnit = new Unit[6],
                Index = indexMax + 1
            };
        SelectedUnitsService.UnitSelectionArray = listEntity.ArrayUnit;
        SelectedUnitsService.FileIndex = listEntity.Index;
        NavigationService.NavigateFromTo("/list", "/build");
    }

    public void OpenCloseDetail(int index)
    {
        if (SelectedListIndex == index)
        {
            SelectedListIndex = -1;
        }
        else
        {
            SelectedListIndex = index;
            SelectedUnitsService.FileIndex = index;
            SelectedUnitsService.UnitSelectionArray = Lists.FirstOrDefault(x => x.Index == index).ArrayUnit;
        }
    }

    public string GetListDetailClass(int index)
    {
        return index != SelectedListIndex ? "list-detail" : "list-detail-selected";
    }

    public string GetExpanded(int index)
    {
        return index != SelectedListIndex ? "panel-detail-collapsed" : "panel-detail-expanded";
    }

    public string SlideRight(int index)
    {
        return index != SelectedListIndex ? "" : "slide-right";
    }
}