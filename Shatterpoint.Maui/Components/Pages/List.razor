@using Shatterpoint.Lib.Extensions
@using Shatterpoint.Lib.Model
@using Shatterpoint.Lib.Services;
@using Shatterpoint.Lib.Units;
@using Shatterpoint.Maui.Components.Reusable;
@using System.Text;
@using Shatterpoint.Maui.Services

@page "/"
@page "/list"
@inject UnitDataBaseService UnitDataBaseService
@inject SelectedUnitsService SelectedUnitsService
@inject NavigationService NavigationService;
@inject DataAccessLayer DataAccessLayer;
@inject IJSRuntime JSRuntime;

<script type="text/javascript">
    window.getDimensions = function () {
        return {
            width: window.innerWidth,
            height: window.innerHeight
        };
    };
</script>

<div class="page-content scrollable">
    <ul>
        @foreach (var entity in Lists)
        {
            <li class="grid @SlideRight(entity.Index)" @onclick="(MouseEventArgs e) => HandleClick(entity.Index, e)">
                <input class="edit-button" type="image" src="img/icons/list.png" @onclick="() => EditList()" value="Edit List" />
                <div style="color: white;">@entity.Index</div>
                <UnitArray ArrayUnit="entity.ArrayUnit" @key="entity" />
                <input class="play-button" type="image" src="img/icons/lightsabers.png" @onclick="() => CustomCards()" value="Custom Cards" />
            </li>
        }
    </ul>

    <div class="footer">
        <input class="button-style" type="button" value="Add new list" @onclick="AddNewList" />
    </div>
</div>


@code {

    public List<ListEntity> Lists { get; set; } = new();

    public int SelectedListIndex { get; set; } = -1;
    public int MouseX { get; set; }
    public int ScreenWidth { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Load all data
        Lists = await DataAccessLayer.LoadLists();
        var dimentions = await JSRuntime.InvokeAsync<BrowserDimension>("getDimensions");
        ScreenWidth = dimentions.Width;

        await base.OnInitializedAsync();
    }

    private string GetTotalForce()
    {
        int result = 0;

        foreach (var unit in SelectedUnitsService.UnitSelectionArray.Where(x => x is not null))
        {
            result += unit.Force;
        }
        return result.ToString();
    }

    public void EditList()
    {
        SelectedUnitsService.FileIndex = SelectedListIndex;
        SelectedUnitsService.UnitSelectionArray = Lists.FirstOrDefault(x => x.Index == SelectedListIndex).ArrayUnit;
        NavigationService.NavigateFromTo("/list", "/build");
    }

    public void CustomCards()
    {
        SelectedUnitsService.FileIndex = SelectedListIndex;
        SelectedUnitsService.UnitSelectionArray = Lists.FirstOrDefault(x => x.Index == SelectedListIndex).ArrayUnit;
        NavigationService.NavigateFromTo("/list", "/play");
    }

    public void AddNewList()
    {
        var indexMax = Lists.LastOrDefault()?.Index ?? 0;
        var listEntity = new ListEntity()
            {
                ArrayUnit = new Unit[6],
                Index = indexMax + 1
            };
        SelectedUnitsService.UnitSelectionArray = listEntity.ArrayUnit;
        SelectedUnitsService.FileIndex = listEntity.Index;
        NavigationService.NavigateFromTo("/list", "/build");
    }

    public class BrowserDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    public async Task<BrowserDimension> GetDimensions()
    {
        return await JSRuntime.InvokeAsync<BrowserDimension>("getDimensions");
    }

    public void HandleClick(int index, MouseEventArgs e)
    {
        MouseX = (int)e.PageX;
        if (SelectedListIndex == index)
        {
            SelectedListIndex = -1;
        }
        else
        {
            SelectedListIndex = index;
            SelectedUnitsService.FileIndex = index;
            SelectedUnitsService.UnitSelectionArray = Lists.FirstOrDefault(x => x.Index == index).ArrayUnit;
        }
    }

    public string GetListDetailClass(int index)
    {
        return index != SelectedListIndex ? "list-detail" : "list-detail-selected";
    }

    public string GetExpanded(int index)
    {
        return index != SelectedListIndex ? "panel-detail-collapsed" : "panel-detail-expanded";
    }

    public string SlideRight(int index)
    {
        if (index != SelectedListIndex)
            return "";

        if (ScreenWidth / MouseX < 2)
            return "slide-right";
        else
            return "slide-left";
    }
}