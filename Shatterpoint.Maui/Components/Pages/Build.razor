@using Shatterpoint.Lib.Services;

@page "/"
@inject UnitDataBaseService UnitDataBaseService
@inject SelectedUnitsService SelectedUnitsService

<div class="unit-selection-table">
    <h1>Units available</h1>
    <p>Chose up to 6 Units</p>
    <table>
        @foreach (var unit in @UnitDataBaseService.UnitList)
        {
            <tr>
                <td>
                    <a @onclick="() => AddUnit(unit.Name)">
                        <div class="image-container">
                            <img class="image" atl="@unit.ProfilePicture" src="@String.Format("/img/pp/{0}", @unit.ProfilePicture)" />
                            <div class="overlay"></div>
                        </div>
                        @unit.Name
                    </a>
                </td>
            </tr>
        }
    </table>
</div>

<div>
    <h1>Selected Units</h1>
    <a style="display:block" href="#" @onclick="ClearSelectedUnits">Clear selection</a>
    <div class="selected-pp footer">
        @for (int i = 0; i < 6; i++)
        {
            @if (@SelectedUnitsService.SelectedUnits.Count > i)
            {
                <a>
                    <div class="image-container">
                        <img alt="@SelectedUnitsService.SelectedUnits[i].Name" src="@String.Format("/img/pp/{0}", @SelectedUnitsService.SelectedUnits[i].ProfilePicture)" />
                        <div class="overlay"></div>
                    </div>
                </a>
            }
            else
            {
                <a>
                    <div class="image-container">
                        <div class="overlay dashed"></div>
                    </div>
                </a>
            }
        }
    </div>

</div>

@code {
    public int countOfSelection { get; set; } = 0;

    public void ClearSelectedUnits()
    {
        countOfSelection = 0;
        SelectedUnitsService.ClearSelectedUnits();
    }

    public void AddUnit(string unitName)
    {
        var selectedUnits = SelectedUnitsService.SelectedUnits;

        // Case: Already exists
        var alreadyExists = selectedUnits.Any(x => x.Name == unitName);
        if (alreadyExists)
            return;

        // Case: this name unit does not exist
        var unit = UnitDataBaseService.UnitList.FirstOrDefault(x => x.Name == unitName);
        if (unit is null)
            return;

        // Case: array full
        var notFull = selectedUnits.Count() < 6;
        if (!notFull)
            return;

        //Save to the first empty location
        countOfSelection++;
        SelectedUnitsService.AddUnit(unit);
    }

}
