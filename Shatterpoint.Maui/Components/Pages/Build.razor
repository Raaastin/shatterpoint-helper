@using Shatterpoint.Lib.Extensions
@using Shatterpoint.Lib.Services;
@using Shatterpoint.Lib.Units;
@using Shatterpoint.Maui.Components.Reusable;
@using System.Text;
@using Shatterpoint.Maui.Services

@page "/"
@page "/build"
@inject UnitDataBaseService UnitDataBaseService
@inject SelectedUnitsService SelectedUnitsService
@inject NavigationService NavigationService;

<div class="unit-selection-panel fade-in">
    <ul>
        @foreach (var unit in UnitDataBaseService.UnitList)
        {
            @if (FilterByText(unit.Name, unit.KeyWords) && FilterByUnitType(unit.Type))
            {
                <li class="@GetClass(unit.Name, unit.Type)" @key="unit">
                    <a @onclick="async () => await AddUnit(unit.Name)">
                        <ProfilePicture Scale="0.5" Top="@unit.Top" Left="@unit.Left" Src="@unit.StanceCardUrl1" Alt="@unit.Name" />
                        <div class="unit-summary">
                            <div class="unit-name">@unit.Name</div>
                            <div class="unit-type">@unit.Type</div>
                            <div class="unit-keywords">@GetKeywords(unit)</div>
                        </div>
                    </a>
                    <div class="icon-detail-container">
                        <a @onclick='() => NavigationService.NavigateFromTo("/build", $"/cards/{unit.Name}")'>
                            <img class="icon-detail" alt="details" src="/img/icons/show-details.png" />
                        </a>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="footer">
    <UnitFilter @ref="FilterItem" @bind-FieldText="FieldText"
                @bind-PrimaryChecked="PrimaryChecked"
                @bind-SecondaryChecked="SecondaryChecked"
                @bind-SupportChecked="SupportChecked"
                OnFilterChanged="HandleFieldChanged">
    </UnitFilter>
    <div class="selected-unit-panel">
        @{
            int i = 0;
        }
        @foreach (var unit in SelectedUnitsService.UnitSelectionArray)
        {
            int buffer = i;
            <div class="flex-auto fade-in" @onclick="async () => await OnEmptyClick(buffer)" @key="unit">
                @if (unit is not null)
                {
                    <ProfilePicture Scale="0.4" Top="@unit.Top" Left="@unit.Left" Src="@unit.StanceCardUrl1" Alt="@unit.Name" IsSelected="@IsSelected(buffer)" />
                }
                else
                {
                    <ProfilePictureEmpty Scale="0.4" IsSelected="@IsSelected(buffer)" />

                }
            </div>
            i++;
        }

        <div class="flex-auto">
            <a  class="poubelle fade-in" href="#" @onclick="async () => await ClearSelectedUnits()">
                <img style="width:40px; height:auto; border-radius:50%; outline: 2px solid black; " alt="clear" src="img/icons/trash.png" />
            </a>
        </div>
    </div>
</div>

@code {
    public string FieldText { get; set; }
    public bool PrimaryChecked { get; set; } = true;
    public bool SecondaryChecked { get; set; } = true;
    public bool SupportChecked { get; set; } = true;

    public string GetKeywords(Unit unit)
    {
        var sb = new StringBuilder();

        foreach (var keyword in unit.KeyWords)
        {
            sb.Append($"{keyword} | ");
        }

        return sb.ToString();
    }

    UnitFilter FilterItem;

    public async Task ClearSelectedUnits()
    {
        SelectedUnitsService.ClearSelectedUnits();
        SelectedIndex = -1;
        await Save();
    }

    public string GetClass(string name, UnitType type)
    {
        var selectedUnits = SelectedUnitsService.UnitSelectionArray;

        if (selectedUnits.Any(x => x?.Name == name))
            return "row-selected";
        else
            return "row-not-selected " + IsSelectable(type);
    }

    public string IsSelectable(UnitType type)
    {
        if (SelectedUnitsService.UnitSelectionArray.Count(x => x is not null && x.Type == type) >= 2 && SelectedIndex == -1)
            return "not-selectable";
        return null;
    }

    public bool IsSelected(int index)
    {
        return index == SelectedIndex;
    }

    private void RemoveUnitFromSelectionArray(Unit unit)
    {
        for (int i = 0; i < 6; i++)
        {
            if (SelectedUnitsService.UnitSelectionArray[i]?.Name == unit.Name)
                SelectedUnitsService.UnitSelectionArray[i] = null;
        }
    }

    public int SelectedIndex { get; set; } = -1;

    public async Task OnEmptyClick(int index)
    {
        // Case: select
        if (SelectedIndex != index)
        {
            SelectedIndex = index;

            // Filter
            PrimaryChecked = index == 0 || index == 3;
            SecondaryChecked = index == 1 || index == 4;
            SupportChecked = index == 2 || index == 5;
        }
        // Case: unselect
        else
        {
            SelectedIndex = -1;
            await FilterItem.OnClearAsync();
        }

    }

    public void HandleFieldChanged(bool changed)
    {
        SelectedIndex = -1;
    }

    private void AddUnitToSelectionArray(Unit unit)
    {
        // Add unit to the unit selection
        switch (unit.Type)
        {
            case UnitType.Primary:
                if (SelectedUnitsService.UnitSelectionArray[0] is null && SelectedIndex != 3)
                    SelectedUnitsService.UnitSelectionArray[0] = unit;
                else
                    SelectedUnitsService.UnitSelectionArray[3] = unit;
                break;
            case UnitType.Secondary:
                if (SelectedUnitsService.UnitSelectionArray[1] is null && SelectedIndex != 4)
                    SelectedUnitsService.UnitSelectionArray[1] = unit;
                else
                    SelectedUnitsService.UnitSelectionArray[4] = unit;
                break;
            case UnitType.Support:
                if (SelectedUnitsService.UnitSelectionArray[2] is null && SelectedIndex != 5)
                    SelectedUnitsService.UnitSelectionArray[2] = unit;
                else
                    SelectedUnitsService.UnitSelectionArray[5] = unit;
                break;
        }
    }

    public async Task AddUnit(string unitName)
    {
        var selectedUnits = SelectedUnitsService.UnitSelectionArray;

        // Case: Already exists => Remove from the selection
        var unitFound = selectedUnits.Where(x => x?.Name == unitName).FirstOrDefault();
        if (unitFound is not null)
        {
            SelectedUnitsService.RemoveUnit(Array.IndexOf(selectedUnits, unitFound));
            if (unitName == SelectedUnitsService.ActiveUnit?.ActiveUnit?.Name)
            {
                SelectedUnitsService.ActiveUnit = null;
            }
            RemoveUnitFromSelectionArray(unitFound);
            await Save();
            return;
        }


        // Case: this name unit does not exist => do nothing
        var unit = UnitDataBaseService.UnitList.FirstOrDefault(x => x.Name == unitName);
        if (unit is null)
            return;


        // Case: Only if a slot is selected: replace the slot.
        if (SelectedIndex >= 0)
        {
            SelectedUnitsService.UnitSelectionArray[SelectedIndex] = unit;
            SelectedIndex = -1;

            await Save();
            return;
        }

        // Case: Unit type full
        if (SelectedUnitsService.UnitSelectionArray.Where(x => x?.Type == unit.Type).Count() >= 2)
        {
            return;
        }

        // Case: nominal => add Unit to the selection
        AddUnitToSelectionArray(unit);
        SelectedIndex = -1;

        await Save();
    }

    private async Task Save()
    {
        await Task.Run(async () =>
        {
            var path = FileSystem.Current.AppDataDirectory;
            var fullPath = Path.Combine(path, "shatterpointlist.json");

            await File.WriteAllTextAsync(fullPath, SelectedUnitsService.UnitSelectionArray.ToJson());
        });
    }

    protected async override Task OnInitializedAsync()
    {
        var path = FileSystem.Current.AppDataDirectory;
        var fullPath = Path.Combine(path, "shatterpointlist.json");

        // Create if not exists
        if (!File.Exists(fullPath))
        {
            var emptyUnitList = new Unit[6];
            await File.WriteAllTextAsync(fullPath, emptyUnitList.ToJson());
        }

        // Load data
        if (SelectedUnitsService.UnitSelectionArray is null)
        {
            var arrayNames = await File.ReadAllTextAsync(fullPath);
            var data = arrayNames.FromJson(UnitDataBaseService);
            SelectedUnitsService.UnitSelectionArray = data;
        }

        await base.OnInitializedAsync();
    }

    private List<Unit> GetFilteredList(List<Unit> source)
    {
        var result = new List<Unit>();

        foreach (var unit in source)
        {
            if (FilterByText(unit.Name, unit.KeyWords) && FilterByUnitType(unit.Type))
            {
                result.Add(unit);
            }
        }

        return result;
    }

    /// <summary>
    /// Return true when the name matches the filter
    /// </summary>
    /// <returns></returns>
    private bool FilterByText(string unitName, List<string> keywords)
    {
        return string.IsNullOrWhiteSpace(FieldText) // if field empty
        || unitName.ToLower().Contains(FieldText.ToLower()) // or name matches
        || keywords.Any(x => x.ToLower().Contains(FieldText.ToLower())) // or keyword matches
        ;
    }

    /// <summary>
    /// Return true when the unit type has checkbox checked
    /// </summary>
    /// <param name="unitType"></param>
    /// <returns></returns>
    private bool FilterByUnitType(UnitType unitType)
    {
        return unitType == UnitType.Primary && PrimaryChecked
        || unitType == UnitType.Secondary && SecondaryChecked
        || unitType == UnitType.Support && SupportChecked;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }
}
