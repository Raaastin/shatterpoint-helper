@using Shatterpoint.Lib.Services;
@using Shatterpoint.Lib.Units;
@using Shatterpoint.Maui.Components.Reusable;
@using System.Text;

@page "/"
@page "/build"
@inject UnitDataBaseService UnitDataBaseService
@inject SelectedUnitsService SelectedUnitsService

<div class="unit-selection-panel">
    <ul>
        <Virtualize Items="@GetFilteredList(UnitDataBaseService.UnitList)" Context="unit">
            @if (FilterByText(unit.Name, unit.KeyWords) && FilterByUnitType(unit.Type))
            {
                <li class="@GetClass(unit.Name)">
                    <a @onclick="() => AddUnit(unit.Name)">
                        <ProfilePicture Scale="0.5" Top="@unit.Top" Left="@unit.Left" Src="@unit.StanceCardUrl1" Alt="@unit.Name" />
                        <div class="unit-summary">
                            <div class="unit-name">@unit.Name</div>
                            <div class="unit-type">@unit.Type</div>
                            <div class="unit-keywords">@GetKeywords(unit)</div>
                        </div>
                    </a>
                    <div class="icon-detail-container">
                        <a href="/cards/@unit.Name">
                            <img class="icon-detail" alt="details" src="/img/icons/show-details.png" />
                        </a>
                    </div>
                </li>
            }
        </Virtualize>
    </ul>
</div>

<div class="footer">
    <UnitFilter @bind-FieldText="FieldText"
                @bind-PrimaryChecked="PrimaryChecked"
                @bind-SecondaryChecked="SecondaryChecked"
                @bind-SupportChecked="SupportChecked">
    </UnitFilter>
    <div class="selected-unit-panel">
        @for (int i = 0; i < 6; i++)
        {
            @if (@SelectedUnitsService.SelectedUnits.Count > i)
            {
                var unit = SelectedUnitsService.SelectedUnits[i];
                <div class="flex-auto">
                    <ProfilePicture Scale="0.4" Top="@unit.Top" Left="@unit.Left" Src="@unit.StanceCardUrl1" Alt="@unit.Name" />
                </div>
            }
            else
            {
                <div class="flex-auto">
                    <ProfilePictureEmpty Scale="0.4" />
                </div>
            }
        }

        <div class="flex-auto">
            <a style="display:flex; justify-content:center;" href="#" @onclick="ClearSelectedUnits">
                <img style="width:40px; height:auto; border-radius:50%; outline: 2px solid black; " alt="clear" src="img/icons/trash.png" />
            </a>
        </div>
    </div>
</div>

@code {

    public string FieldText { get; set; }
    public bool PrimaryChecked { get; set; } = true;
    public bool SecondaryChecked { get; set; } = true;
    public bool SupportChecked { get; set; } = true;

    public string GetKeywords(Unit unit)
    {
        var sb = new StringBuilder();

        foreach (var keyword in unit.KeyWords)
        {
            sb.Append($"{keyword} | ");
        }

        return sb.ToString();
    }

    public void ClearSelectedUnits()
    {
        SelectedUnitsService.ClearSelectedUnits();
    }

    public string GetClass(string name)
    {
        var selectedUnits = SelectedUnitsService.SelectedUnits;

        if (selectedUnits.Any(x => x.Name == name))
            return "row-selected";
        else
            return "row-not-selected";
    }

    public void AddUnit(string unitName)
    {
        var selectedUnits = SelectedUnitsService.SelectedUnits;

        // Case: Already exists => remove from the selection
        var unitFound = selectedUnits.Where(x => x.Name == unitName).FirstOrDefault();
        if (unitFound is not null)
        {
            SelectedUnitsService.RemoveUnit(unitFound);
            return;
        }

        // Case: this name unit does not exist => do nothing
        var unit = UnitDataBaseService.UnitList.FirstOrDefault(x => x.Name == unitName);
        if (unit is null)
            return;

        // Case: array full => do nothing
        var notFull = selectedUnits.Count() < 6;
        if (!notFull)
            return;

        // Case: nominal => add Unit to the selection
        SelectedUnitsService.AddUnit(unit);
    }

    private List<Unit> GetFilteredList(List<Unit> source)
    {
        var result = new List<Unit>();

        foreach (var unit in source)
        {
            if (FilterByText(unit.Name, unit.KeyWords) && FilterByUnitType(unit.Type))
            {
                result.Add(unit);
            }
        }

        return result;
    }

    /// <summary>
    /// Return true when the name matches the filter
    /// </summary>
    /// <returns></returns>
    private bool FilterByText(string unitName, List<string> keywords)
    {
        return string.IsNullOrWhiteSpace(FieldText) // if field empty
        || unitName.ToLower().Contains(FieldText.ToLower()) // or name matches
        || keywords.Any(x => x.ToLower().Contains(FieldText.ToLower())) // or keyword matches
        ;
    }

    /// <summary>
    /// Return true when the unit type has checkbox checked
    /// </summary>
    /// <param name="unitType"></param>
    /// <returns></returns>
    private bool FilterByUnitType(UnitType unitType)
    {
        return unitType == UnitType.Primary && PrimaryChecked
        || unitType == UnitType.Secondary && SecondaryChecked
        || unitType == UnitType.Support && SupportChecked;
    }
}
