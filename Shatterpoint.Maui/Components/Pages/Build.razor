@using Shatterpoint.Lib.Services;
@using Shatterpoint.Lib.Units;
@using Shatterpoint.Maui.Components.Reusable;
@using System.Text;

@page "/"
@inject UnitDataBaseService UnitDataBaseService
@inject SelectedUnitsService SelectedUnitsService

<div class="unit-selection-panel">
    <ul>
        @foreach (var unit in @UnitDataBaseService.UnitList)
        {
            @if (FilterByName(unit.Name))
            {
                @if (FilterByKeyword(unit.KeyWords))
                {
                    <li class="@GetClass(unit.Name)">
                        <a @onclick="() => AddUnit(unit.Name)">
                            <ProfilePicture Unit="unit" Scale="0.5" />
                            <div class="unit-summary">
                                <div class="unit-name">@unit.Name</div>
                                <div class="unit-type">@unit.Type</div>
                                <div class="unit-keywords">@GetKeywords(unit)</div>
                            </div>
                        </a>
                        <div class="icon-detail-container">
                            <a href="/cards/@unit.Name" @onclick="() => ShowDetail(unit)">
                                <img class="icon-detail" alt="details" src="/img/icons/show-details.png" />
                            </a>
                        </div>
                    </li>
                }
            }
        }
    </ul>
</div>

<div class="footer">
    <UnitFilter @bind-FieldName="FieldName" @bind-FieldKeyword="FieldKeyword"></UnitFilter>
    <div><a style="display:block" href="#" @onclick="ClearSelectedUnits">Clear selection</a></div>
    <div class="selected-unit-panel">
        @for (int i = 0; i < 6; i++)
        {
            @if (@SelectedUnitsService.SelectedUnits.Count > i)
            {
                <div class="flex-auto">
                    <ProfilePicture Unit="@SelectedUnitsService.SelectedUnits[i]" Scale="0.6" />
                </div>
            }
            else
            {
                <div class="flex-auto">
                    <ProfilePictureEmpty Scale="0.6" />
                </div>
            }
        }
    </div>
</div>

@code {

    public string FieldName { get; set; }
    public string FieldKeyword { get; set; }

    public void ShowDetail(Unit unit)
    {
    }

    public string GetKeywords(Unit unit)
    {
        var sb = new StringBuilder();

        foreach (var keyword in unit.KeyWords)
        {
            sb.Append($"{keyword} | ");
        }

        return sb.ToString();
    }

    public void ClearSelectedUnits()
    {
        SelectedUnitsService.ClearSelectedUnits();
    }

    public string GetClass(string name)
    {
        var selectedUnits = SelectedUnitsService.SelectedUnits;

        if (selectedUnits.Any(x => x.Name == name))
            return "row-selected";
        else
            return "row-not-selected";
    }

    public void AddUnit(string unitName)
    {
        var selectedUnits = SelectedUnitsService.SelectedUnits;

        // Case: Already exists => remove from the selection
        var unitFound = selectedUnits.Where(x => x.Name == unitName).FirstOrDefault();
        if (unitFound is not null)
        {
            SelectedUnitsService.RemoveUnit(unitFound);
            return;
        }

        // Case: this name unit does not exist => do nothing
        var unit = UnitDataBaseService.UnitList.FirstOrDefault(x => x.Name == unitName);
        if (unit is null)
            return;

        // Case: array full => do nothing
        var notFull = selectedUnits.Count() < 6;
        if (!notFull)
            return;

        // Case: nominal => add Unit to the selection
        SelectedUnitsService.AddUnit(unit);
    }

    /// <summary>
    /// Return true when the name matches the filter
    /// </summary>
    /// <returns></returns>
    private bool FilterByName(string unitName)
    {
        return string.IsNullOrWhiteSpace(FieldName) || unitName.ToLower().Contains(FieldName.ToLower());
    }

    /// <summary>
    /// Return true when at least 1 keyword matches the filter
    /// </summary>
    /// <param name="keywords"></param>
    /// <returns></returns>
    private bool FilterByKeyword(List<string> keywords)
    {
        return string.IsNullOrWhiteSpace(FieldKeyword) || keywords.Any(x => x.ToLower().Contains(FieldKeyword.ToLower()));
    }
}
