@using Shatterpoint.Lib.Services;
@using Shatterpoint.Lib.Units;
@using Shatterpoint.Maui.Components.Reusable;
@using System.Text;

@page "/"
@inject UnitDataBaseService UnitDataBaseService
@inject SelectedUnitsService SelectedUnitsService

<div class="unit-selection-panel">
    <p>Chose up to 6 Units</p>
    <ul>
        @foreach (var unit in @UnitDataBaseService.UnitList)
        {
            <li class="@GetClass(unit.Name)">
                <a @onclick="() => AddUnit(unit.Name)">
                    <ProfilePicture Unit="unit" Scale="0.5" />
                    <div>
                        <div class="unit-name">@unit.Name</div>
                        <div class="unit-type">@unit.Type</div>
                        <div class="unit-keywords">@GetKeywords(unit)</div>
                    </div>
                </a>
            </li>
        }
    </ul>
</div>

<div class=" footer">
    <div><a style="display:block" href="#" @onclick="ClearSelectedUnits">Clear selection</a></div>
    <div class="selected-unit-panel">
        @for (int i = 0; i < 6; i++)
        {
            @if (@SelectedUnitsService.SelectedUnits.Count > i)
            {
                <div class="flex-auto">
                    <ProfilePicture Unit="@SelectedUnitsService.SelectedUnits[i]" Scale="0.7" />
                </div>
            }
            else
            {
                <div class="flex-auto">
                    <ProfilePictureEmpty Scale="0.7" />
                </div>
            }
        }
    </div>
</div>

@code {

    public string GetKeywords(Unit unit)
    {
        var sb = new StringBuilder();

        foreach(var keyword in unit.KeyWords)
        {
            sb.Append($"{keyword} | ");
        }

        return sb.ToString();
    }

    public void ClearSelectedUnits()
    {
        SelectedUnitsService.ClearSelectedUnits();
    }

    public string GetClass(string name)
    {
        var selectedUnits = SelectedUnitsService.SelectedUnits;

        if (selectedUnits.Any(x => x.Name == name))
            return "row-selected";
        else
            return "row-not-selected";
    }

    public void AddUnit(string unitName)
    {
        var selectedUnits = SelectedUnitsService.SelectedUnits;

        // Case: Already exists => remove from the selection
        var unitFound = selectedUnits.Where(x => x.Name == unitName).FirstOrDefault();
        if (unitFound is not null)
        {
            SelectedUnitsService.RemoveUnit(unitFound);
            return;
        }

        // Case: this name unit does not exist => do nothing
        var unit = UnitDataBaseService.UnitList.FirstOrDefault(x => x.Name == unitName);
        if (unit is null)
            return;

        // Case: array full => do nothing
        var notFull = selectedUnits.Count() < 6;
        if (!notFull)
            return;

        // Case: nominal => add Unit to the selection
        SelectedUnitsService.AddUnit(unit);
    }
}
