@using Shatterpoint.Lib.Services;
@using Shatterpoint.Lib.Units
@using Shatterpoint.Lib.Units.Abilities
@using Shatterpoint.Lib.Model;
@using Shatterpoint.Lib.Extensions;
@using Shatterpoint.Maui.Components.Reusable;

@page "/play"
@inject SelectedUnitsService SelectedUnitsService
@inject UnitDataBaseService UnitDataBaseService



@* Panel scrollable *@
<div class="scrollable">

    @if (@SelectedUnitsService.ActiveUnit is not null)
    {
        /* Card: Unit active */
        <AbilityCard Unit="@SelectedUnitsService.ActiveUnit.ActiveUnit" Abilities="@SelectedUnitsService.ActiveUnit.CurrentActivationSynergies" />

        /* Card: Unit is targeted*/
        @if (@SelectedUnitsService.ActiveUnit.GettingTargetedSynegies.Any())
        {
            <AbilityCard Unit="@SelectedUnitsService.ActiveUnit.ActiveUnit" Abilities="@SelectedUnitsService.ActiveUnit.GettingTargetedSynegies" />
        }
    }

    @if (@SelectedUnitsService.PayAttentionAbilities is not null && @SelectedUnitsService.PayAttentionAbilities.Any())
    {
        /* Card: Pay attention */
        <div class="dynamic-card">
            <div class="dynamic-card-title">
                <table>
                    <tr>
                        <td>
                            <div>Pay Attention</div>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="dynamic-card-content">
                <table>
                    @foreach (var ability in @SelectedUnitsService.PayAttentionAbilities)
                    {
                        @if (ability is not null)
                        {
                            <tr>
                                <td>
                                    <img alt="@ability.Type.ToString()" src="@String.Format("/img/abilities/{0}.png", ability.Type)" />
                                    <ProfilePicture Unit="@ability.Weilder" Scale="0.3" />

                                </td>
                                <td>
                                    <div class="ability-content">
                                        <div class="ability-title">
                                            <h4>@ability.Name</h4>
                                            @for (int i = 0; i < ability.Cost; i++)
                                            {
                                                <div>
                                                    <img class="force-logo" alt="Cost" src="/img/abilities/force.png" />
                                                </div>
                                            }
                                        </div>
                                        <p>
                                            @((MarkupString)@ability.Text.ToRawHtmlDescription())
                                        </p>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </table>
            </div>
        </div>
    }

</div>

@* Fixed unit selection*@
<div class="selected-pp footer">

    @if (!@SelectedUnitsService.SelectedUnits.Any())
    {
        <p>There is no selected unit. Visit /build/index to select your 6 units</p>
    }
    else
    {
        @foreach (var unit in @SelectedUnitsService.SelectedUnits)
        {
            <a @onclick="() => SelectUnit(unit)">
                <ProfilePicture Unit="unit" Scale="0.4" />
            </a>
        }
        <a @onclick="() => PayAttention()">
            <div class="image-container .img-center ">
                <img alt="Op turn" src="fakepath.png" />
                <div class="overlay"></div>
            </div>
        </a>
    }
</div>


@code {

    public void SelectUnit(Unit unit)
    {
        // Disable "pay attention" abilities
        SelectedUnitsService.PayAttentionAbilities = null;

        var activeAbilities = SelectedUnitsService.GetAbilitiesForTheActiveUnit(unit);
        var targetedAbilities = SelectedUnitsService.GetAbilitiesForTheTargetedUnit(unit);

        SelectedUnitsService.ActiveUnit = new ActiveUnitModel();
        SelectedUnitsService.ActiveUnit.ActiveUnit = unit;
        SelectedUnitsService.ActiveUnit.CurrentActivationSynergies = activeAbilities;
        SelectedUnitsService.ActiveUnit.GettingTargetedSynegies = targetedAbilities;

    }

    public void PayAttention()
    {
        // Disable active unit:
        SelectedUnitsService.ActiveUnit = null;

        var abilities = SelectedUnitsService.PayAttention();
        SelectedUnitsService.PayAttentionAbilities = abilities;
    }
}
