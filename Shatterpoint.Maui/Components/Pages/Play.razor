@using Shatterpoint.Lib.Services;
@using Shatterpoint.Lib.Units
@using Shatterpoint.Lib.Units.Abilities
@using Shatterpoint.Lib.Model;
@using Shatterpoint.Lib.Extensions;
@using Shatterpoint.Maui.Components.Reusable;
@using Shatterpoint.Maui.Services

@page "/play"
@inject SelectedUnitsService SelectedUnitsService
@inject UnitDataBaseService UnitDataBaseService
@inject NavigationService NavigationService

@* Panel scrollable *@
<div class="scrollable">
    @* Case: List is empty *@
    @if (!@SelectedUnitsService.UnitSelectionArray.Any(x => x is not null))
    {
        <p style="color: wheat; padding: 5px;">
            Hu how, looks like it's empty ...
        </p>
        <p style="color: wheat; padding: 5px;">
            Did you select a non empty list on the tab <input style="width: 30px; position:relative; top:10px;" type="image" src="/img/icons/list-icon.png" alt="list tab" @onclick='() => NavigationService.NavigateFromTo("play", "list")' /> ?
        </p>
    }
    @* Case: List is ready *@
    else
    {
        @* When a character is selected *@
        if (@SelectedUnitsService.ActiveUnit is not null)
        {
            /* Card: Unit active */
            <AbilityCard Unit="@SelectedUnitsService.ActiveUnit.ActiveUnit" Abilities="@SelectedUnitsService.ActiveUnit.CurrentActivationSynergies" IsActive="@true" />

            /* Card: Unit is targeted*/
            @if (@SelectedUnitsService.ActiveUnit.GettingTargetedSynegies.Any())
            {
                <AbilityCard Unit="@SelectedUnitsService.ActiveUnit.ActiveUnit" Abilities="@SelectedUnitsService.ActiveUnit.GettingTargetedSynegies" IsActive="@false" />
            }

            <ul style="color: wheat; ">
                <li style="padding: 5px; ">The 1st card shows all abilities usable for when the unit is doing something</li>
                <li style="padding: 5px; ">The 2nd card (if any) shows any ability for when the unit is the target of an attack.</li>
            </ul>
        }
        @* When "Pay attention" is selected *@
        else if (@SelectedUnitsService.PayAttentionAbilities is not null && PayAttentionSelected)
        {
            if (@SelectedUnitsService.PayAttentionAbilities.Any())
            {
                <AbilityCard Unit="null" Abilities="@SelectedUnitsService.PayAttentionAbilities" />
            }
            else
            {
                <p style="color: wheat; padding: 5px;">
                    The current list presents no ability to display at this timing.
                </p>
            }

            <p style="color: wheat; padding: 5px;">
                The "Pay attention" button will display all abilities that require your attention when your opponent is playing.
            </p>
        }
        @* Case: No selection *@
        else
        {
            <p style="color: wheat; padding: 5px;">
                Select a character to display available abilities.
            </p>
        }

        <p style="color: wheat; padding: 5px;">
            Tap the same selected character to display the original cards.
        </p>
    }


</div>

@* Fixed unit selection*@
<div class="selected-pp footer">
    @foreach (var unit in @SelectedUnitsService.UnitSelectionArray.Where(x => x is not null))
    {
        <a @onclick="() => SelectUnit(unit)">
            <ProfilePicture Scale="0.4" Top="@unit.Top" Left="@unit.Left" Src="@unit.StanceCardUrl1" Alt="@unit.Name" IsSelected="@IsSelected(unit.Name)" />
        </a>
    }
    @if (@SelectedUnitsService.UnitSelectionArray.Any(x => x is not null))
    {
        <a @onclick="() => PayAttention()">
            <img style="width:40px; height:auto; border-radius:50%; border: 2px solid black;" alt="Op turn" src="img/card/exclamation.jpg" class="@GetHalo()" />
        </a>
    }
</div>


@code {
    public bool PayAttentionSelected { get; set; }
    public string GetHalo()
    {
        if (PayAttentionSelected)
            return "halo";
        else
            return null;
    }

    public void SelectUnit(Unit unit)
    {
        // case: unit is already selected
        if (SelectedUnitsService.ActiveUnit?.ActiveUnit == unit)
        {
            NavigationService.NavigateFromTo("/play", $"/cards/{unit.Name}");
            return;
        }

        // Disable "pay attention" abilities
        SelectedUnitsService.PayAttentionAbilities = null;
        PayAttentionSelected = false;

        var activeAbilities = SelectedUnitsService.GetAbilitiesForTheActiveUnit(unit);
        var targetedAbilities = SelectedUnitsService.GetAbilitiesForTheTargetedUnit(unit);

        SelectedUnitsService.ActiveUnit = new ActiveUnitModel();
        SelectedUnitsService.ActiveUnit.ActiveUnit = unit;
        SelectedUnitsService.ActiveUnit.CurrentActivationSynergies = activeAbilities;
        SelectedUnitsService.ActiveUnit.GettingTargetedSynegies = targetedAbilities;

    }

    public bool IsSelected(string unitName)
    {
        return SelectedUnitsService?.ActiveUnit?.ActiveUnit?.Name == unitName;
    }

    public void PayAttention()
    {
        // Disable active unit:
        SelectedUnitsService.ActiveUnit = null;
        PayAttentionSelected = true;

        var abilities = SelectedUnitsService.PayAttention();
        SelectedUnitsService.PayAttentionAbilities = abilities;
    }

    protected override Task OnInitializedAsync()
    {
        // Workaround: Prevent the display of an old active unit
        if (SelectedUnitsService.ActiveUnit is not null && !SelectedUnitsService.UnitSelectionArray.Any(x => x is not null && x.Name == SelectedUnitsService.ActiveUnit.ActiveUnit.Name))
            SelectedUnitsService.ActiveUnit = null;

        PayAttentionSelected = false;
        return base.OnInitializedAsync();
    }
}
