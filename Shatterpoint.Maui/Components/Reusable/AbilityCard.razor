@using Shatterpoint.Lib.Extensions
@using Shatterpoint.Lib.Units
@using Shatterpoint.Lib.Units.Abilities
@using Shatterpoint.Lib.Data;


<div class="dynamic-card fade-in">
    <div style="@GetBackgroundImage()" class="dynamic-card-title flex-row">
        @if (@Unit is not null)
        {
            <div class="flex-1 flex-column">
                <ProfilePicture Scale="0.5" Top="@Unit.Top" Left="@Unit.Left" Src="@Unit.StanceCardUrl1" Alt="@Unit.Name" />
            </div>
        }
        else if (IsActive is null)
        {
            <div class="flex-1 flex-column">
                <img class="sabre-active-logo flex-1" src="/img/card/exclamation.jpg" />
            </div>
        }

        @if (@Unit?.Name is not null)
        {
            <div class="flex-5">
                <div class="card-title ">@Unit?.Name</div>
            </div>
        }
        @* Case: Pay attention *@
        else if (IsActive is null)
        {
            <div class="card-title flex-5">Pay attention</div>
        }

        @if (IsActive is true)
        {
            <div class="flex-1 flex-column">
                <img class="sabre-active-logo" src="/img/card/sabres-active.jpeg" />
            </div>
        }
        @if (IsActive is false)
        {
            <div class="flex-1 flex-column">
                <img class="sabre-active-logo" src="/img/card/cible.png" />
            </div>
        }
    </div>
    <div class="dynamic-card-content">
        <table>
            @foreach (var ability in @Abilities)
            {
                @if (ability is not null)
                {
                    <tr>
                        <td>
                            <img class="ability-type" alt="@ability.Type.ToString()" src="@GetAbilityCard(ability)" />
                            @if (ability.Weilder.Name != @Unit?.Name)
                            {
                                <div class="specific-ability-weilder">
                                    <ProfilePicture Scale="0.3" Top="@ability.Weilder.Top" Left="@ability.Weilder.Left" Src="@ability.Weilder.StanceCardUrl1" Alt="@ability.Weilder.Name" />
                                </div>
                            }
                        </td>
                        <td>
                            <div class="ability-content">
                                <div class="ability-title">
                                    <h4>@((MarkupString)@ability.Name)</h4>
                                    @for (int i = 0; i < ability.Cost; i++)
                                    {
                                        <div>
                                            <img class="force-logo" alt="Cost" src="@IconReferences.forceicon" />
                                        </div>
                                    }
                                </div>
                                <p>
                                    @((MarkupString)@ability.Text.ToRawHtmlDescription())
                                </p>
                            </div>
                        </td>
                    </tr>
                }
            }
        </table>
    </div>
</div>

@code {

    [Parameter]
    public bool? IsActive { get; set; }

    [Parameter]
    public Unit Unit { get; set; }

    [Parameter]
    public List<Ability> Abilities { get; set; }

    public string GetBackgroundImage()
    {
        if (Unit is null)
            return "background-image: url(../img/card/title-back-blue.png);";

        switch (Unit.CardColor)
        {
            case UnitCardColor.Red:
                return "background-image: url(../img/card/title-back-red.png);";
            case UnitCardColor.Blue:
                return "background-image: url(../img/card/title-back-blue.png);";
            default:
                return "background-image: url(../img/card/title-back-blue.png);";
        }
    }

    public string GetAbilityCard(Ability ability)
    {
        switch (ability.Weilder.CardColor)
        {
            case UnitCardColor.Red:
                return @String.Format("/img/abilities/{0}.png", ability.Type);
            case UnitCardColor.Blue:
                return @String.Format("/img/abilities/{0}-blue.png", ability.Type);
            default:
                return @String.Format("/img/abilities/{0}.png", ability.Type);
        }
    }
}
