@using Shatterpoint.Lib.Units

<div class="component">
    <div class="filter">
        <ul>
            <li>
                <div class="input-text-container">
                    <input id="input-name" class="filter-item-input-text" type="text" placeholder="Unit name" @oninput="OnFieldNameChanged" @bind-value="FieldName" />
                    <input type="button" class="input-name-clear-button" @onclick="() => { FieldName = null; FieldNameChanged.InvokeAsync(FieldName); }" />
                </div>
            </li>
            <li>
                <div class="checkbox-container">
                    <label class="@GetCheckboxStyle(IsPrimaryChecked)">
                        Primary
                        <input class="filter-item-input-cb" type="checkbox" checked="@IsPrimaryChecked" @onclick="() => { IsPrimaryChecked = !IsPrimaryChecked;}" />
                    </label>
                    <label class="@GetCheckboxStyle(IsSecondaryChecked)">
                        Secondary
                        <input class="filter-item-input-cb" type="checkbox" checked="@IsSecondaryChecked" @onclick="() => { IsSecondaryChecked = !IsSecondaryChecked;}" />
                    </label>
                    <label class="@GetCheckboxStyle(IsSupportChecked)">
                        Support
                        <input class="filter-item-input-cb" type="checkbox" checked="@IsSupportChecked" @onclick="() => { IsSupportChecked = !IsSupportChecked;}" />
                    </label>
                </div>
            </li>
            <li>
                <div class="input-text-container">
                    <input id="input-keyword" class="filter-item-input-text" type="text" placeholder="keyword" @oninput="OnFieldKeywordChanged" @bind-value="FieldKeyword" />
                    <input type="button" class="input-name-clear-button" @onclick="() => { FieldKeyword = null; FieldKeywordChanged.InvokeAsync(FieldKeyword); }" />
                </div>
            </li>
        </ul>
    </div>
</div>


@code {
    private bool IsPrimaryChecked { get; set; } = true;
    private bool IsSecondaryChecked { get; set; } = true;
    private bool IsSupportChecked { get; set; } = true;

    [Parameter]
    public string FieldName { get; set; }
    [Parameter]
    public EventCallback<string> FieldNameChanged { get; set; }
    private Task OnFieldNameChanged(ChangeEventArgs e)
    {
        FieldName = e.Value.ToString();
        return FieldNameChanged.InvokeAsync(FieldName);
    }

    [Parameter]
    public string FieldKeyword { get; set; }
    [Parameter]
    public EventCallback<string> FieldKeywordChanged { get; set; }
    private Task OnFieldKeywordChanged(ChangeEventArgs e)
    {
        FieldKeyword = e.Value.ToString();
        return FieldKeywordChanged.InvokeAsync(FieldKeyword);
    }

    public string GetCheckboxStyle(bool isChecked)
    {
        if (isChecked)
            return "checkbox-style-checked";
        else
            return "checkbox-style";
    }
}
