@using Shatterpoint.Lib.Units

<div class="component">
        <div class="filter">
            <input type="button" class="@GetExpandedStyle(IsExpanded)" @onclick="() => { IsExpanded = !IsExpanded; }" />
            <ul>               
                <li>
                    <div class="input-text-container">
                        <input id="input-name" class="filter-item-input-text" type="text" placeholder="Unit name or keyword" @oninput="OnFieldTextChanged" @bind-value="FieldText" />
                        <input type="button" class="button-style input-name-clear-button" @onclick="OnClear" />
                    </div>
                </li>
                @if (IsExpanded)
                {
                    <li>
                        <div class="checkbox-container">
                            <label class="@GetCheckboxStyle(PrimaryChecked)">
                                Primary
                                <input class="filter-item-input-cb" type="checkbox" checked="@PrimaryChecked" @onclick="OnPrimaryCheckClicked" />
                            </label>
                            <label class="@GetCheckboxStyle(SecondaryChecked)">
                                Secondary
                                <input class="filter-item-input-cb" type="checkbox" checked="@SecondaryChecked" @onclick="OnSecondaryCheckedClicked" />
                            </label>
                            <label class="@GetCheckboxStyle(SupportChecked)">
                                Support
                                <input class="filter-item-input-cb" type="checkbox" checked="@SupportChecked" @onclick="OnSupportCheckedClicked" />
                            </label>
                        </div>
                    </li>
                } 
            </ul>
        </div>
</div>


@code {

    [Parameter] 
    public EventCallback<bool> OnFilterChanged { get; set; }

    [Parameter]
    public bool IsExpanded { get; set; } = false;

    // Filter binding explained:
    // input value is "FieldText"
    // input @onclick: OnFieldTextChanged
    // @onclick method SHALL invoke: FieldTextChanged
    // When parent binds @bind-FieldText, the callback FieldTextChanged SHALL exists with this exact name
    // The parent binds one of its properties with the result of FieldTextChanged event.

    [Parameter]
    public string FieldText { get; set; }
    [Parameter]
    public EventCallback<string> FieldTextChanged { get; set; }
    private Task OnFieldTextChanged(ChangeEventArgs e)
    {
        FieldText = e.Value.ToString();
        return FieldTextChanged.InvokeAsync(FieldText);
    }

    [Parameter]
    public bool PrimaryChecked { get; set; } = true;
    [Parameter]
    public EventCallback<bool> PrimaryCheckedChanged { get; set; }
    public Task OnPrimaryCheckClicked()
    {
        PrimaryChecked = !PrimaryChecked;
        OnFilterChanged.InvokeAsync(true);
        return PrimaryCheckedChanged.InvokeAsync(PrimaryChecked);
    }

    [Parameter]
    public bool SecondaryChecked { get; set; } = true;
    [Parameter]
    public EventCallback<bool> SecondaryCheckedChanged { get; set; }
    public Task OnSecondaryCheckedClicked()
    {
        SecondaryChecked = !SecondaryChecked;
        OnFilterChanged.InvokeAsync(true);
        return SecondaryCheckedChanged.InvokeAsync(SecondaryChecked);
    }

    [Parameter]
    public bool SupportChecked { get; set; } = true;
    [Parameter]
    public EventCallback<bool> SupportCheckedChanged { get; set; }
    public Task OnSupportCheckedClicked()
    {
        SupportChecked = !SupportChecked;
        OnFilterChanged.InvokeAsync(true);
        return SupportCheckedChanged.InvokeAsync(SupportChecked);
    }

    public async Task OnClear()
    {
        FieldText = null;
        IsExpanded = false;
        PrimaryChecked = true;
        SecondaryChecked = true;
        SupportChecked = true;

        var tasks = new List<Task>();
        tasks.Add(FieldTextChanged.InvokeAsync(FieldText));
        tasks.Add(PrimaryCheckedChanged.InvokeAsync(PrimaryChecked));
        tasks.Add(SecondaryCheckedChanged.InvokeAsync(SecondaryChecked));
        tasks.Add(SupportCheckedChanged.InvokeAsync(SupportChecked));
        tasks.Add(OnFilterChanged.InvokeAsync(true));
        await Task.WhenAll(tasks);
    }

    public string GetCheckboxStyle(bool isChecked)
    {
        if (isChecked)
            return "checkbox-style-checked";
        else
            return "checkbox-style";
    }

    public string GetExpandedStyle(bool isExpanded){
        if(isExpanded)
            return "button-style button-expanded";
        else
            return "button-style button-collapsed";
    }
}
